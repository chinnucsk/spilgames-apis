//
//  Spil.h
//  Spil
//
//  Created by Ignacio Calderon on 7/6/12.
//  Copyright (c) 2012 Spil Games. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <CoreLocation/CoreLocation.h>

#import "PublicHeaders.h"

/**
 * Public interface to the funcionalities of the Spil iOS framework.
 */
@interface Spil : NSObject

/**
 * Create a Spil object singleton with an application ID and authentication token that will be used along the framework
 * for multiple services.
 * Also you must specify some configurations to control the behaivor of the framework. Most important, if the framework
 * should act like a development environment or a production environment.
 * Some validations about the configurations are made, if one fails, a nil object is returned, and the error is written 
 * in the console log.
 * @param	applicationID	The application ID provided by Spil Games, it can't be nil.
 * @param	authenticationToken	The authentication token provided by Spil Games, it can't be nil.
 * @param	configurations	A dictionary with the posible settings to be used by spil framework.
 * @return	The Spil object that will be use for further calls.
 */
+(Spil*) spilWithAppID:(NSString*)applicationID token:(NSString*)authenticationToken configs:(NSDictionary*)configurations;

/**
 * Method to retrieve the sharedInstance, since this class is a singleton. The instance returned could be nil if the
 * constructor above haven't been called or if was error occured.
 * @return	The shared instance of this Spil object.
 */
+(Spil*) sharedInstance;

#pragma mark - App Settings methods

/**
 * Method to retrieve the AppSettings for this app. A delegate is required in order to deliver the settings downloaded from 
 * the server or loaded from the default files.
 * @param	delegate	The delegate to handle the response of the AppSettings subsystem.
 */
-(void) getSettings:(id<AppSettingsDelegate>)delegate;

#pragma mark - Ads methods

/**
 * Method to set the AdsDelegate and receive the proper notifications from it. Also allows to receive the push notifications.
 * @param	delegate The delegate to handle the events generated by the Ads subsystem.
 */
-(void) getAds:(id<AdsDelegate>)delegate;

/**
 * Turn on/off if the ads should be displayed. The ads are displayed by default. For gameplay screens should be turned off.
 * After return to the menus should be turned on again.
 * @param	state	Indicates if the ads should be displayed or not.
 */
-(void) adsEnabled:(BOOL)state;

/**
 * Force to show the More Games screen.
 */
-(void) adsShowMoreGames;

/**
 * The ads are displayed based on a timer, this method force the ad to be shown right
 * away.
 */
-(void) adsNextInterstitial;

/**
 * Cache the next interstitial image to speed up the load time.
 */
-(void) adsCacheNextInterstitial;

/**
 * Place one of the interstitial assets over the provided container filling the area specified. The area specifies the
 * relative position to the container position and the dimensions of the space to be filled.
 * If the area falls outside the container area, nothing will be shown and a message will be printed on the console.
 * If the container is nil, nothing will be shown and a message will be printed on the console.
 * The area can be equal to the area of the container view.
 * This method returns immediately, although, the image can be applied later due to the asynchronous nature of chartboost.
 * @param	container	A view that will contain the advert
 * @param	area	The rectangle where the advert will be shown inside the view.
 * @return	NO	if any of the conditions are not met, YES otherwise.
 */
-(BOOL) adsPlaceAdOn:(UIView*)container at:(CGRect)area;

/**
 * Remove the advertisements from their superviews.
 */
-(void) adsRemovePlacedAds;

#pragma mark - Tracking methods

/**
 * Method to set up the delegate for the extended tracking events. This delegate is optional, 
 * but its usage it's encouraged since this will guarantee the calls made are actually efective and not
 * dropped because the extended tracking wasn't started yet.
 */
-(void) getExtendedTracking:(id<TrackingExtendedDelegate>)delegate;

/**
 * Track request to register a particular page. It can be used to keep track of the current screen separetely from the events.
 * If the session is not started yet, this request is ignored.
 * @param	page	The page name/url to track.
 */
-(void) trackPage:(NSString*)page;

/**
 * Track request to register an event. The event could be actions taken on some object like unlocking an achievement, or a getting a hi score.
 * In google analytics jargot they will be register as a "category"="event" and the event passed as parameter as the action taken.
 * In flurry jargot, an event with parameters is created and the parameters match with google analytics (category,action,label,value)
 * @param	event	The event to track.
 */
-(void) trackEvent:(NSString*)event;

/**
 * Track request to register an event under a particular category. The parameters match with the google analytics' ones. For flurry, a event with
 * parameters is issued.
 * @param	category	The category for this event.
 * @param	action		The action took on that category.
 * @param	label		Optional. A string label to especify something about the action.
 * @param	value		Optional. A integer value. useful to especify error codes.
 */
-(void) trackEvent:(NSString*)category action:(NSString*)action label:(NSString*)label value:(int)value;

/**
 * Track request to register an event with particular parameters. This match the Flurry's logEvent:withParameters:. It's not supported for GAN.
 * @param	event		The event to track
 * @param	params		Additional parameters to attach to the event.
 */
-(void) trackEvent:(NSString *)event withParams:(NSDictionary*)params;

/**
 * Track requesto to register the start of an event that should end in a finite time. If the tracking system support it natively the equivalent
 * method will be used. Otherwise, an event with the start timestamp(epoch) is issued.
 * @param	event	The event to track.
 */
-(void) trackTimedEvent:(NSString*)event;

/**
 * Track requesto to register the end of an event that was started. If the tracking system support it natively the equivalent method will be used.
 * Otherwise, an event with the end timestamp(epoch) is issued.
 * @param	event	The event to track. Should match with the starting event.
 * @param	params	The parameters when the event was finished.
 * @see trackTimedEvent:
 */
-(void) trackEndTimedEvent:(NSString*)event withParams:(NSDictionary*)params;

/**
 * Track requesto to register the end of an event that was started. If the tracking system support it natively the equivalent method will be used.
 * Otherwise, an event with the end timestamp(epoch) is issued.
 * @param	event	The event to track. Should match with the starting event. 
 * @see trackTimedEvent:
 */
-(void) trackEndTimedEvent:(NSString*)event;

/**
 * Track request to register an error that has occured in the application.
 * @param	event	The event to track.
 * @param	msg	The message with the detail of the error.
 * @param	exception	The exception that causes the error.
 */
-(void) trackError:(NSString*)event message:(NSString*)msg exception:(NSException*)exception;

/**
 * Track the user ID that logged in the application. Useful to keep track of how many users return to the application.
 * @param	userID	The user ID to track.
 */
-(void) trackUserID:(NSString*)userID;

/**
 * Track the age of the user is logged in the application. Useful for demographic information.
 * @param	age	The age to track.
 */
-(void) trackAge:(int)age;

/**
 * Track the gender of the user is logged in the application. Useful for demographic information.
 * @param	male	YES|TRUE if the player is male, NO|FALSE if the player is female.
 */
-(void) trackGender:(BOOL)male;

/**
 * Track the location information of the player if it's available. If the tracking system support it natively the equivalent
 * method will be used. Otherwise, an event with the information of the location (latitude, longitude and accuracy) is issued.
 * @param	latitude	The latitude where the device is. (it's a double value)
 * @param	longitude	The longitude where the device is. (it's a double value).
 * @param	hAccuracy	The horizontal accuracy of the measurement. (it's a double value).
 * @param	vAccuracy	The vertical accuracy of the measurement. (it's a double value).
 */
-(void) trackLatitude:(CLLocationDegrees)latitude longitude:(CLLocationDegrees)longitude horizontalAccuracy:(CLLocationAccuracy)hAccuracy verticalAccuracy:(CLLocationAccuracy)vAccuracy;

/**
 * Start the recording of the gestures for a new screen, the gestures for this screen will be stored together regarding how many times this
 * screen has been started.
 * @param	screenName	The name of the screen to record.
 */
-(void) trackStartGestureScreen:(NSString*)screenName;

/**
 * Stop the recording gestures for this screen, the gestures are drop until you start a new screen.
 */
-(void) trackStopGestureScreen;

#pragma mark - AB Test methods 

/**
 * Method to set the ABTestDelegate and receive the proper notifications from it.
 * @param	delegate The delegate to handle the events generated by the A/B test subsystem.
 */
-(void) getABTest:(id<ABTestDelegate>)delegate;

/**
 * Update the user basic information to create segments and improve A/B tests. This
 * method will send: 
 * - Country
 * - Language
 * - Device (ipad, ipod, iphone)
 * - OS Platform (version)
 */
-(void) abtestUpdateUserInfo;

/**
 * Update the user information to create segments and improve A/B tests. This
 * method will send the basic information plus all the information included in the extra info
 * @param	extraInfo	A dictionary with all the extra parameter we want to submit.
 * @see abtestUpdateUserInfo
 */
-(void) abtestUpdateUserInfoWith:(NSDictionary*)extraInfo;

/**
 * Send a request to retrieve the test differences for this user (MAC Address). The 
 * differences will be sent asynchronously to the ABTestDelegate implemented and set 
 * in the getABTest method.
 */
-(void) abtestGetTestDiff;

/**
 * For development purposes only. Send a request to retrieve the test differences for 
 * this user. The differences will be sent asynchronously to the ABTestDelegate implemented 
 * and set in the getABTest method.
 * @param	user	The user to force the different variants of the A/B test.
 */
-(void) abtestGetTestDiffForUser:(NSString*)user;

/**
 * Mark a particular resource as a success with the parameters that lead to that success.
 * This method should be called with the exact name of the resource and also it must
 * be called with the control version to be able to compare results.
 * @param	name	The name of the resource to mark as a successful one.
 * @param	params	A dictionary with extra parameters relevant for the analysis of the action called.
 */
-(void) abtestMarkSucceedTest:(NSString*)name withParameters:(NSDictionary*)params;

@end